{{- $values := .Values }}
{{- range $name, $pool := .Values.workers }}
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{ $.Values.global.clusterName }}-{{ $name }}
spec:
  template:
    spec:
      {{- if hasKey $.Values.global.kubeadmConfigSpec "verbosity" }}
      verbosity: {{ $.Values.global.kubeadmConfigSpec.verbosity | default 1 }}
      {{- end }}
      joinConfiguration:
        nodeRegistration:
          imagePullPolicy: IfNotPresent
          name: {{`"{{ ds.meta_data.local_hostname }}"`}}
          kubeletExtraArgs:
            cloud-provider: "external"
            provider-id: {{`"aws:///{{ ds.meta_data.placement.availability_zone }}/{{ ds.meta_data.instance_id }}"`}}
            {{- with $pool.nodeLabels }}
            node-labels: "{{ range $i, $k := (keys . | sortAlpha) }}{{ if ne $i 0 }},{{ end }}{{ $k }}={{ index $pool.nodeLabels $k }}{{ end }}"
            {{- end }}
        #
        # Here we specify the directory that contains the patch files
        # See: https://cluster-api.sigs.k8s.io/tasks/bootstrap/kubeadm-bootstrap/kubelet-config#use-kubeadms-kubeletconfiguration-patch-target
        # See: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/control-plane-flags/#patches
        #
        patches:
          directory: /etc/kubernetes/patches
      preKubeadmCommands:
        - mkdir -p /etc/pre-kubeadm-commands
        - for script in $(find /etc/pre-kubeadm-commands/ -name '*.sh' -type f | sort);
          do echo "Running script $script"; "$script"; done
      postKubeadmCommands:
        - mkdir -p /etc/post-kubeadm-commands
        - for script in $(find /etc/post-kubeadm-commands/ -name '*.sh' -type f | sort);
          do echo "Running script $script"; "$script"; done
      files:
        # Here we put a patch file for kubeletconfiguration target in strategic patchtype on nodes via KubeadmConfigSpec.files
        # The naming convention of the patch file is kubeletconfiguration{suffix}+{patchtype}.yaml where {suffix} is an string and {patchtype} is one of the following: strategic, merge, json.
        # {suffix} determines the order of the patch files. The patches are applied in the alpha-numerical order of the {suffix}.
        #
        # See https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/
        #
        - path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.yaml
          owner: "root:root"
          permissions: "0644"
          content: |
            apiVersion: kubelet.config.k8s.io/v1beta1
            kind: KubeletConfiguration
            {{- with $.Values.global.KubeletConfiguration }}
            {{- tpl (. | toYaml) $ | nindent 12 }}
            {{- end }}
        - path: /etc/pre-kubeadm-commands/00-wait_endpoint.sh
          owner: root:root
          permissions: "0755"
          content: |
            #!/bin/bash
            set +e
            # Define the retry function
            wait_and_retry() {
              local retries="$1"
              local wait="$2"
              local command="$3"

              $command
              local exit_code=$?

              if [[ $exit_code -ne 0 && $retries -gt 0 ]]; then
                echo "# Wait $wait before retrying $retries : $command"
                sleep $wait
                wait_and_retry $(($retries - 1)) $wait "$command"
              else
                return $exit_code
              fi
            }
            # wait endpoint is up
            endpoint=""
            [[ -f /run/kubeadm/kubeadm.yaml ]] && endpoint=$(grep "controlPlaneEndpoint" /run/kubeadm/kubeadm.yaml|awk ' {print $2 }' |sed -e 's/ //g;s/:.*//g')
            [[ -f  /run/kubeadm/kubeadm-join-config.yaml ]] && endpoint=$(grep "apiServerEndpoint" /run/kubeadm/kubeadm-join-config.yaml |awk ' {print $2 }' |sed -e 's/ //g;s/:.*//g')
            [[ -n "$endpoint" ]] && wait_and_retry 360 10 "host $endpoint"
            # wait external access is up
            external_url="github.com"
            [[ -n "$external_url" ]] && wait_and_retry 360 10 "host $external_url"
        {{ if $values.global.addons.spegel.enabled -}}
        - path: /etc/containerd/config.d/spegel.toml
          owner: root:root
          permissions: "0644"
          content: |
            [plugins."io.containerd.grpc.v1.cri".containerd]
              discard_unpacked_layers = false
        {{ end -}}
        - path: /etc/pre-kubeadm-commands/10-containerd-restart.sh
          owner: root:root
          permissions: "0700"
          content: |
            #!/bin/bash
            #
            # pre-kubadm-scripts
            #
            set -e
            # apply containerd config before kubeadm
            echo "## restart containerd"
            systemctl daemon-reload
            systemctl restart containerd
        - path: /etc/apt/apt.conf.d/99proxy
          owner: "root:root"
          permissions: "0644"
          content: |
            Acquire {
              {{- if $values.global.http_proxy }}
              http::Proxy {{ $values.global.http_proxy | quote }};
              {{- end }}
              {{- if $values.global.https_proxy }}
              https::Proxy {{ $values.global.https_proxy | quote }};
              {{- end }}
            }
        - path: /etc/systemd/system/containerd.service.d/http-proxy.conf
          owner: "root:root"
          permissions: "0644"
          content: |
            [Service]
            {{- if $values.global.http_proxy }}
            Environment="HTTP_PROXY={{ $values.global.http_proxy }}"
            {{- end }}
            {{- if $values.global.https_proxy }}
            Environment="HTTPS_PROXY={{ $values.global.https_proxy }}"
            {{- end }}
            {{- if $values.global.no_proxy }}
            Environment="NO_PROXY=.svc,.svc.cluster,.svc.cluster.local,127.0.0.0/8,192.168.0.0/16,{{ $values.global.pods.cidrBlocks }},{{ $values.global.services.cidrBlocks }}"
            {{- end }}
---
{{- end }}
